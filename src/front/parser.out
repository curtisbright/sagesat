Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program vardecl
Rule 2     program -> program assertdecl
Rule 3     program -> vardecl
Rule 4     program -> assertdecl
Rule 5     vardecl -> boolvardecl
Rule 6     vardecl -> graphvardecl
Rule 7     boolvardecl -> BOOL ID
Rule 8     graphvardecl -> GRAPH ID LPAREN NUMBER optgraphrange RPAREN graphdef
Rule 9     optgraphrange -> COLON NUMBER
Rule 10    optgraphrange -> empty
Rule 11    graphdef -> EQUALS LBRACKET exprlist RBRACKET
Rule 12    graphdef -> empty
Rule 13    exprlist -> expr nonemptylist
Rule 14    exprlist -> empty
Rule 15    nonemptylist -> COMMA expr nonemptylist
Rule 16    nonemptylist -> empty
Rule 17    assertdecl -> ASSERT expr
Rule 18    operation -> ID LPAREN exprlist RPAREN
Rule 19    expr -> expr AND expr
Rule 20    expr -> expr OR expr
Rule 21    expr -> NOT expr
Rule 22    expr -> operation
Rule 23    expr -> ID
Rule 24    expr -> NUMBER
Rule 25    expr -> LPAREN expr RPAREN
Rule 26    empty -> <empty>

Terminals, with rules where they appear

AND                  : 19
ASSERT               : 17
BOOL                 : 7
COLON                : 9
COMMA                : 15
EQUALS               : 11
GRAPH                : 8
ID                   : 7 8 18 23
LBRACKET             : 11
LPAREN               : 8 18 25
NOT                  : 21
NUMBER               : 8 9 24
OR                   : 20
RBRACKET             : 11
RPAREN               : 8 18 25
error                : 

Nonterminals, with rules where they appear

assertdecl           : 2 4
boolvardecl          : 5
empty                : 10 12 14 16
expr                 : 13 15 17 19 19 20 20 21 25
exprlist             : 11 18
graphdef             : 8
graphvardecl         : 6
nonemptylist         : 13 15
operation            : 22
optgraphrange        : 8
program              : 1 2 0
vardecl              : 1 3

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program vardecl
    (2) program -> . program assertdecl
    (3) program -> . vardecl
    (4) program -> . assertdecl
    (5) vardecl -> . boolvardecl
    (6) vardecl -> . graphvardecl
    (17) assertdecl -> . ASSERT expr
    (7) boolvardecl -> . BOOL ID
    (8) graphvardecl -> . GRAPH ID LPAREN NUMBER optgraphrange RPAREN graphdef

    ASSERT          shift and go to state 1
    BOOL            shift and go to state 7
    GRAPH           shift and go to state 6

    vardecl                        shift and go to state 2
    boolvardecl                    shift and go to state 3
    program                        shift and go to state 4
    assertdecl                     shift and go to state 5
    graphvardecl                   shift and go to state 8

state 1

    (17) assertdecl -> ASSERT . expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr OR expr
    (21) expr -> . NOT expr
    (22) expr -> . operation
    (23) expr -> . ID
    (24) expr -> . NUMBER
    (25) expr -> . LPAREN expr RPAREN
    (18) operation -> . ID LPAREN exprlist RPAREN

    NOT             shift and go to state 13
    ID              shift and go to state 11
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 12

    expr                           shift and go to state 9
    operation                      shift and go to state 14

state 2

    (3) program -> vardecl .

    ASSERT          reduce using rule 3 (program -> vardecl .)
    BOOL            reduce using rule 3 (program -> vardecl .)
    GRAPH           reduce using rule 3 (program -> vardecl .)
    $end            reduce using rule 3 (program -> vardecl .)


state 3

    (5) vardecl -> boolvardecl .

    ASSERT          reduce using rule 5 (vardecl -> boolvardecl .)
    BOOL            reduce using rule 5 (vardecl -> boolvardecl .)
    GRAPH           reduce using rule 5 (vardecl -> boolvardecl .)
    $end            reduce using rule 5 (vardecl -> boolvardecl .)


state 4

    (0) S' -> program .
    (1) program -> program . vardecl
    (2) program -> program . assertdecl
    (5) vardecl -> . boolvardecl
    (6) vardecl -> . graphvardecl
    (17) assertdecl -> . ASSERT expr
    (7) boolvardecl -> . BOOL ID
    (8) graphvardecl -> . GRAPH ID LPAREN NUMBER optgraphrange RPAREN graphdef

    ASSERT          shift and go to state 1
    BOOL            shift and go to state 7
    GRAPH           shift and go to state 6

    vardecl                        shift and go to state 15
    boolvardecl                    shift and go to state 3
    assertdecl                     shift and go to state 16
    graphvardecl                   shift and go to state 8

state 5

    (4) program -> assertdecl .

    ASSERT          reduce using rule 4 (program -> assertdecl .)
    BOOL            reduce using rule 4 (program -> assertdecl .)
    GRAPH           reduce using rule 4 (program -> assertdecl .)
    $end            reduce using rule 4 (program -> assertdecl .)


state 6

    (8) graphvardecl -> GRAPH . ID LPAREN NUMBER optgraphrange RPAREN graphdef

    ID              shift and go to state 17


state 7

    (7) boolvardecl -> BOOL . ID

    ID              shift and go to state 18


state 8

    (6) vardecl -> graphvardecl .

    ASSERT          reduce using rule 6 (vardecl -> graphvardecl .)
    BOOL            reduce using rule 6 (vardecl -> graphvardecl .)
    GRAPH           reduce using rule 6 (vardecl -> graphvardecl .)
    $end            reduce using rule 6 (vardecl -> graphvardecl .)


state 9

    (17) assertdecl -> ASSERT expr .
    (19) expr -> expr . AND expr
    (20) expr -> expr . OR expr

    ASSERT          reduce using rule 17 (assertdecl -> ASSERT expr .)
    BOOL            reduce using rule 17 (assertdecl -> ASSERT expr .)
    GRAPH           reduce using rule 17 (assertdecl -> ASSERT expr .)
    $end            reduce using rule 17 (assertdecl -> ASSERT expr .)
    AND             shift and go to state 19
    OR              shift and go to state 20


state 10

    (24) expr -> NUMBER .

    AND             reduce using rule 24 (expr -> NUMBER .)
    OR              reduce using rule 24 (expr -> NUMBER .)
    ASSERT          reduce using rule 24 (expr -> NUMBER .)
    BOOL            reduce using rule 24 (expr -> NUMBER .)
    GRAPH           reduce using rule 24 (expr -> NUMBER .)
    $end            reduce using rule 24 (expr -> NUMBER .)
    RPAREN          reduce using rule 24 (expr -> NUMBER .)
    COMMA           reduce using rule 24 (expr -> NUMBER .)
    RBRACKET        reduce using rule 24 (expr -> NUMBER .)


state 11

    (23) expr -> ID .
    (18) operation -> ID . LPAREN exprlist RPAREN

    AND             reduce using rule 23 (expr -> ID .)
    OR              reduce using rule 23 (expr -> ID .)
    ASSERT          reduce using rule 23 (expr -> ID .)
    BOOL            reduce using rule 23 (expr -> ID .)
    GRAPH           reduce using rule 23 (expr -> ID .)
    $end            reduce using rule 23 (expr -> ID .)
    RPAREN          reduce using rule 23 (expr -> ID .)
    COMMA           reduce using rule 23 (expr -> ID .)
    RBRACKET        reduce using rule 23 (expr -> ID .)
    LPAREN          shift and go to state 21


state 12

    (25) expr -> LPAREN . expr RPAREN
    (19) expr -> . expr AND expr
    (20) expr -> . expr OR expr
    (21) expr -> . NOT expr
    (22) expr -> . operation
    (23) expr -> . ID
    (24) expr -> . NUMBER
    (25) expr -> . LPAREN expr RPAREN
    (18) operation -> . ID LPAREN exprlist RPAREN

    NOT             shift and go to state 13
    ID              shift and go to state 11
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 12

    expr                           shift and go to state 22
    operation                      shift and go to state 14

state 13

    (21) expr -> NOT . expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr OR expr
    (21) expr -> . NOT expr
    (22) expr -> . operation
    (23) expr -> . ID
    (24) expr -> . NUMBER
    (25) expr -> . LPAREN expr RPAREN
    (18) operation -> . ID LPAREN exprlist RPAREN

    NOT             shift and go to state 13
    ID              shift and go to state 11
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 12

    expr                           shift and go to state 23
    operation                      shift and go to state 14

state 14

    (22) expr -> operation .

    AND             reduce using rule 22 (expr -> operation .)
    OR              reduce using rule 22 (expr -> operation .)
    ASSERT          reduce using rule 22 (expr -> operation .)
    BOOL            reduce using rule 22 (expr -> operation .)
    GRAPH           reduce using rule 22 (expr -> operation .)
    $end            reduce using rule 22 (expr -> operation .)
    RPAREN          reduce using rule 22 (expr -> operation .)
    COMMA           reduce using rule 22 (expr -> operation .)
    RBRACKET        reduce using rule 22 (expr -> operation .)


state 15

    (1) program -> program vardecl .

    ASSERT          reduce using rule 1 (program -> program vardecl .)
    BOOL            reduce using rule 1 (program -> program vardecl .)
    GRAPH           reduce using rule 1 (program -> program vardecl .)
    $end            reduce using rule 1 (program -> program vardecl .)


state 16

    (2) program -> program assertdecl .

    ASSERT          reduce using rule 2 (program -> program assertdecl .)
    BOOL            reduce using rule 2 (program -> program assertdecl .)
    GRAPH           reduce using rule 2 (program -> program assertdecl .)
    $end            reduce using rule 2 (program -> program assertdecl .)


state 17

    (8) graphvardecl -> GRAPH ID . LPAREN NUMBER optgraphrange RPAREN graphdef

    LPAREN          shift and go to state 24


state 18

    (7) boolvardecl -> BOOL ID .

    ASSERT          reduce using rule 7 (boolvardecl -> BOOL ID .)
    BOOL            reduce using rule 7 (boolvardecl -> BOOL ID .)
    GRAPH           reduce using rule 7 (boolvardecl -> BOOL ID .)
    $end            reduce using rule 7 (boolvardecl -> BOOL ID .)


state 19

    (19) expr -> expr AND . expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr OR expr
    (21) expr -> . NOT expr
    (22) expr -> . operation
    (23) expr -> . ID
    (24) expr -> . NUMBER
    (25) expr -> . LPAREN expr RPAREN
    (18) operation -> . ID LPAREN exprlist RPAREN

    NOT             shift and go to state 13
    ID              shift and go to state 11
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 12

    expr                           shift and go to state 25
    operation                      shift and go to state 14

state 20

    (20) expr -> expr OR . expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr OR expr
    (21) expr -> . NOT expr
    (22) expr -> . operation
    (23) expr -> . ID
    (24) expr -> . NUMBER
    (25) expr -> . LPAREN expr RPAREN
    (18) operation -> . ID LPAREN exprlist RPAREN

    NOT             shift and go to state 13
    ID              shift and go to state 11
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 12

    expr                           shift and go to state 26
    operation                      shift and go to state 14

state 21

    (18) operation -> ID LPAREN . exprlist RPAREN
    (13) exprlist -> . expr nonemptylist
    (14) exprlist -> . empty
    (19) expr -> . expr AND expr
    (20) expr -> . expr OR expr
    (21) expr -> . NOT expr
    (22) expr -> . operation
    (23) expr -> . ID
    (24) expr -> . NUMBER
    (25) expr -> . LPAREN expr RPAREN
    (26) empty -> .
    (18) operation -> . ID LPAREN exprlist RPAREN

    NOT             shift and go to state 13
    ID              shift and go to state 11
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 12
    RPAREN          reduce using rule 26 (empty -> .)

    expr                           shift and go to state 27
    operation                      shift and go to state 14
    exprlist                       shift and go to state 28
    empty                          shift and go to state 29

state 22

    (25) expr -> LPAREN expr . RPAREN
    (19) expr -> expr . AND expr
    (20) expr -> expr . OR expr

    RPAREN          shift and go to state 30
    AND             shift and go to state 19
    OR              shift and go to state 20


state 23

    (21) expr -> NOT expr .
    (19) expr -> expr . AND expr
    (20) expr -> expr . OR expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ASSERT          reduce using rule 21 (expr -> NOT expr .)
    BOOL            reduce using rule 21 (expr -> NOT expr .)
    GRAPH           reduce using rule 21 (expr -> NOT expr .)
    $end            reduce using rule 21 (expr -> NOT expr .)
    RPAREN          reduce using rule 21 (expr -> NOT expr .)
    COMMA           reduce using rule 21 (expr -> NOT expr .)
    RBRACKET        reduce using rule 21 (expr -> NOT expr .)
    AND             shift and go to state 19
    OR              shift and go to state 20

  ! AND             [ reduce using rule 21 (expr -> NOT expr .) ]
  ! OR              [ reduce using rule 21 (expr -> NOT expr .) ]


state 24

    (8) graphvardecl -> GRAPH ID LPAREN . NUMBER optgraphrange RPAREN graphdef

    NUMBER          shift and go to state 31


state 25

    (19) expr -> expr AND expr .
    (19) expr -> expr . AND expr
    (20) expr -> expr . OR expr

    ASSERT          reduce using rule 19 (expr -> expr AND expr .)
    BOOL            reduce using rule 19 (expr -> expr AND expr .)
    GRAPH           reduce using rule 19 (expr -> expr AND expr .)
    $end            reduce using rule 19 (expr -> expr AND expr .)
    RPAREN          reduce using rule 19 (expr -> expr AND expr .)
    COMMA           reduce using rule 19 (expr -> expr AND expr .)
    RBRACKET        reduce using rule 19 (expr -> expr AND expr .)
    AND             shift and go to state 19
    OR              shift and go to state 20

  ! AND             [ reduce using rule 19 (expr -> expr AND expr .) ]
  ! OR              [ reduce using rule 19 (expr -> expr AND expr .) ]


state 26

    (20) expr -> expr OR expr .
    (19) expr -> expr . AND expr
    (20) expr -> expr . OR expr

    ASSERT          reduce using rule 20 (expr -> expr OR expr .)
    BOOL            reduce using rule 20 (expr -> expr OR expr .)
    GRAPH           reduce using rule 20 (expr -> expr OR expr .)
    $end            reduce using rule 20 (expr -> expr OR expr .)
    RPAREN          reduce using rule 20 (expr -> expr OR expr .)
    COMMA           reduce using rule 20 (expr -> expr OR expr .)
    RBRACKET        reduce using rule 20 (expr -> expr OR expr .)
    AND             shift and go to state 19
    OR              shift and go to state 20

  ! AND             [ reduce using rule 20 (expr -> expr OR expr .) ]
  ! OR              [ reduce using rule 20 (expr -> expr OR expr .) ]


state 27

    (13) exprlist -> expr . nonemptylist
    (19) expr -> expr . AND expr
    (20) expr -> expr . OR expr
    (15) nonemptylist -> . COMMA expr nonemptylist
    (16) nonemptylist -> . empty
    (26) empty -> .

    AND             shift and go to state 19
    OR              shift and go to state 20
    COMMA           shift and go to state 33
    RPAREN          reduce using rule 26 (empty -> .)
    RBRACKET        reduce using rule 26 (empty -> .)

    nonemptylist                   shift and go to state 32
    empty                          shift and go to state 34

state 28

    (18) operation -> ID LPAREN exprlist . RPAREN

    RPAREN          shift and go to state 35


state 29

    (14) exprlist -> empty .

    RPAREN          reduce using rule 14 (exprlist -> empty .)
    RBRACKET        reduce using rule 14 (exprlist -> empty .)


state 30

    (25) expr -> LPAREN expr RPAREN .

    AND             reduce using rule 25 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 25 (expr -> LPAREN expr RPAREN .)
    ASSERT          reduce using rule 25 (expr -> LPAREN expr RPAREN .)
    BOOL            reduce using rule 25 (expr -> LPAREN expr RPAREN .)
    GRAPH           reduce using rule 25 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 25 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 25 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 25 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 25 (expr -> LPAREN expr RPAREN .)


state 31

    (8) graphvardecl -> GRAPH ID LPAREN NUMBER . optgraphrange RPAREN graphdef
    (9) optgraphrange -> . COLON NUMBER
    (10) optgraphrange -> . empty
    (26) empty -> .

    COLON           shift and go to state 36
    RPAREN          reduce using rule 26 (empty -> .)

    optgraphrange                  shift and go to state 37
    empty                          shift and go to state 38

state 32

    (13) exprlist -> expr nonemptylist .

    RPAREN          reduce using rule 13 (exprlist -> expr nonemptylist .)
    RBRACKET        reduce using rule 13 (exprlist -> expr nonemptylist .)


state 33

    (15) nonemptylist -> COMMA . expr nonemptylist
    (19) expr -> . expr AND expr
    (20) expr -> . expr OR expr
    (21) expr -> . NOT expr
    (22) expr -> . operation
    (23) expr -> . ID
    (24) expr -> . NUMBER
    (25) expr -> . LPAREN expr RPAREN
    (18) operation -> . ID LPAREN exprlist RPAREN

    NOT             shift and go to state 13
    ID              shift and go to state 11
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 12

    expr                           shift and go to state 39
    operation                      shift and go to state 14

state 34

    (16) nonemptylist -> empty .

    RPAREN          reduce using rule 16 (nonemptylist -> empty .)
    RBRACKET        reduce using rule 16 (nonemptylist -> empty .)


state 35

    (18) operation -> ID LPAREN exprlist RPAREN .

    AND             reduce using rule 18 (operation -> ID LPAREN exprlist RPAREN .)
    OR              reduce using rule 18 (operation -> ID LPAREN exprlist RPAREN .)
    ASSERT          reduce using rule 18 (operation -> ID LPAREN exprlist RPAREN .)
    BOOL            reduce using rule 18 (operation -> ID LPAREN exprlist RPAREN .)
    GRAPH           reduce using rule 18 (operation -> ID LPAREN exprlist RPAREN .)
    $end            reduce using rule 18 (operation -> ID LPAREN exprlist RPAREN .)
    RPAREN          reduce using rule 18 (operation -> ID LPAREN exprlist RPAREN .)
    COMMA           reduce using rule 18 (operation -> ID LPAREN exprlist RPAREN .)
    RBRACKET        reduce using rule 18 (operation -> ID LPAREN exprlist RPAREN .)


state 36

    (9) optgraphrange -> COLON . NUMBER

    NUMBER          shift and go to state 40


state 37

    (8) graphvardecl -> GRAPH ID LPAREN NUMBER optgraphrange . RPAREN graphdef

    RPAREN          shift and go to state 41


state 38

    (10) optgraphrange -> empty .

    RPAREN          reduce using rule 10 (optgraphrange -> empty .)


state 39

    (15) nonemptylist -> COMMA expr . nonemptylist
    (19) expr -> expr . AND expr
    (20) expr -> expr . OR expr
    (15) nonemptylist -> . COMMA expr nonemptylist
    (16) nonemptylist -> . empty
    (26) empty -> .

    AND             shift and go to state 19
    OR              shift and go to state 20
    COMMA           shift and go to state 33
    RPAREN          reduce using rule 26 (empty -> .)
    RBRACKET        reduce using rule 26 (empty -> .)

    nonemptylist                   shift and go to state 42
    empty                          shift and go to state 34

state 40

    (9) optgraphrange -> COLON NUMBER .

    RPAREN          reduce using rule 9 (optgraphrange -> COLON NUMBER .)


state 41

    (8) graphvardecl -> GRAPH ID LPAREN NUMBER optgraphrange RPAREN . graphdef
    (11) graphdef -> . EQUALS LBRACKET exprlist RBRACKET
    (12) graphdef -> . empty
    (26) empty -> .

    EQUALS          shift and go to state 44
    ASSERT          reduce using rule 26 (empty -> .)
    BOOL            reduce using rule 26 (empty -> .)
    GRAPH           reduce using rule 26 (empty -> .)
    $end            reduce using rule 26 (empty -> .)

    graphdef                       shift and go to state 43
    empty                          shift and go to state 45

state 42

    (15) nonemptylist -> COMMA expr nonemptylist .

    RPAREN          reduce using rule 15 (nonemptylist -> COMMA expr nonemptylist .)
    RBRACKET        reduce using rule 15 (nonemptylist -> COMMA expr nonemptylist .)


state 43

    (8) graphvardecl -> GRAPH ID LPAREN NUMBER optgraphrange RPAREN graphdef .

    ASSERT          reduce using rule 8 (graphvardecl -> GRAPH ID LPAREN NUMBER optgraphrange RPAREN graphdef .)
    BOOL            reduce using rule 8 (graphvardecl -> GRAPH ID LPAREN NUMBER optgraphrange RPAREN graphdef .)
    GRAPH           reduce using rule 8 (graphvardecl -> GRAPH ID LPAREN NUMBER optgraphrange RPAREN graphdef .)
    $end            reduce using rule 8 (graphvardecl -> GRAPH ID LPAREN NUMBER optgraphrange RPAREN graphdef .)


state 44

    (11) graphdef -> EQUALS . LBRACKET exprlist RBRACKET

    LBRACKET        shift and go to state 46


state 45

    (12) graphdef -> empty .

    ASSERT          reduce using rule 12 (graphdef -> empty .)
    BOOL            reduce using rule 12 (graphdef -> empty .)
    GRAPH           reduce using rule 12 (graphdef -> empty .)
    $end            reduce using rule 12 (graphdef -> empty .)


state 46

    (11) graphdef -> EQUALS LBRACKET . exprlist RBRACKET
    (13) exprlist -> . expr nonemptylist
    (14) exprlist -> . empty
    (19) expr -> . expr AND expr
    (20) expr -> . expr OR expr
    (21) expr -> . NOT expr
    (22) expr -> . operation
    (23) expr -> . ID
    (24) expr -> . NUMBER
    (25) expr -> . LPAREN expr RPAREN
    (26) empty -> .
    (18) operation -> . ID LPAREN exprlist RPAREN

    NOT             shift and go to state 13
    ID              shift and go to state 11
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 12
    RBRACKET        reduce using rule 26 (empty -> .)

    expr                           shift and go to state 27
    operation                      shift and go to state 14
    exprlist                       shift and go to state 47
    empty                          shift and go to state 29

state 47

    (11) graphdef -> EQUALS LBRACKET exprlist . RBRACKET

    RBRACKET        shift and go to state 48


state 48

    (11) graphdef -> EQUALS LBRACKET exprlist RBRACKET .

    ASSERT          reduce using rule 11 (graphdef -> EQUALS LBRACKET exprlist RBRACKET .)
    BOOL            reduce using rule 11 (graphdef -> EQUALS LBRACKET exprlist RBRACKET .)
    GRAPH           reduce using rule 11 (graphdef -> EQUALS LBRACKET exprlist RBRACKET .)
    $end            reduce using rule 11 (graphdef -> EQUALS LBRACKET exprlist RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 23 resolved as shift
WARNING: shift/reduce conflict for OR in state 23 resolved as shift
