Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program vardecl
Rule 2     program -> program assertdecl
Rule 3     program -> vardecl
Rule 4     program -> assertdecl
Rule 5     vardecl -> boolvardecl
Rule 6     vardecl -> graphvardecl
Rule 7     boolvardecl -> BOOL idprod
Rule 8     graphvardecl -> GRAPH idprod LPAREN NUMBER RPAREN graphdef
Rule 9     graphvardecl -> GRAPH idprod graphdef
Rule 10    graphvardecl -> SAGEGRAPH DOT idprod idprod LPAREN exprlist RPAREN
Rule 11    graphdef -> EQUALS LBRACKET exprlist RBRACKET
Rule 12    graphdef -> EQUALS STR
Rule 13    graphdef -> empty
Rule 14    exprlist -> expr nonemptylist
Rule 15    exprlist -> empty
Rule 16    nonemptylist -> COMMA expr nonemptylist
Rule 17    nonemptylist -> empty
Rule 18    assertdecl -> ASSERT expr
Rule 19    operation -> idprod LPAREN exprlist RPAREN
Rule 20    expr -> expr AND expr
Rule 21    expr -> expr OR expr
Rule 22    expr -> NOT expr
Rule 23    expr -> operation
Rule 24    expr -> idprod
Rule 25    expr -> NUMBER
Rule 26    expr -> LPAREN expr RPAREN
Rule 27    idprod -> ID
Rule 28    empty -> <empty>

Terminals, with rules where they appear

AND                  : 20
ASSERT               : 18
BOOL                 : 7
COMMA                : 16
DOT                  : 10
EQUALS               : 11 12
GRAPH                : 8 9
ID                   : 27
LBRACKET             : 11
LPAREN               : 8 10 19 26
NOT                  : 22
NUMBER               : 8 25
OR                   : 21
RBRACKET             : 11
RPAREN               : 8 10 19 26
SAGEGRAPH            : 10
STR                  : 12
error                : 

Nonterminals, with rules where they appear

assertdecl           : 2 4
boolvardecl          : 5
empty                : 13 15 17
expr                 : 14 16 18 20 20 21 21 22 26
exprlist             : 10 11 19
graphdef             : 8 9
graphvardecl         : 6
idprod               : 7 8 9 10 10 19 24
nonemptylist         : 14 16
operation            : 23
program              : 1 2 0
vardecl              : 1 3

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program vardecl
    (2) program -> . program assertdecl
    (3) program -> . vardecl
    (4) program -> . assertdecl
    (5) vardecl -> . boolvardecl
    (6) vardecl -> . graphvardecl
    (18) assertdecl -> . ASSERT expr
    (7) boolvardecl -> . BOOL idprod
    (8) graphvardecl -> . GRAPH idprod LPAREN NUMBER RPAREN graphdef
    (9) graphvardecl -> . GRAPH idprod graphdef
    (10) graphvardecl -> . SAGEGRAPH DOT idprod idprod LPAREN exprlist RPAREN

    ASSERT          shift and go to state 1
    BOOL            shift and go to state 7
    GRAPH           shift and go to state 6
    SAGEGRAPH       shift and go to state 9

    vardecl                        shift and go to state 2
    boolvardecl                    shift and go to state 3
    program                        shift and go to state 4
    assertdecl                     shift and go to state 5
    graphvardecl                   shift and go to state 8

state 1

    (18) assertdecl -> ASSERT . expr
    (20) expr -> . expr AND expr
    (21) expr -> . expr OR expr
    (22) expr -> . NOT expr
    (23) expr -> . operation
    (24) expr -> . idprod
    (25) expr -> . NUMBER
    (26) expr -> . LPAREN expr RPAREN
    (19) operation -> . idprod LPAREN exprlist RPAREN
    (27) idprod -> . ID

    NOT             shift and go to state 14
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 13
    ID              shift and go to state 16

    expr                           shift and go to state 10
    operation                      shift and go to state 15
    idprod                         shift and go to state 12

state 2

    (3) program -> vardecl .

    ASSERT          reduce using rule 3 (program -> vardecl .)
    BOOL            reduce using rule 3 (program -> vardecl .)
    GRAPH           reduce using rule 3 (program -> vardecl .)
    SAGEGRAPH       reduce using rule 3 (program -> vardecl .)
    $end            reduce using rule 3 (program -> vardecl .)


state 3

    (5) vardecl -> boolvardecl .

    ASSERT          reduce using rule 5 (vardecl -> boolvardecl .)
    BOOL            reduce using rule 5 (vardecl -> boolvardecl .)
    GRAPH           reduce using rule 5 (vardecl -> boolvardecl .)
    SAGEGRAPH       reduce using rule 5 (vardecl -> boolvardecl .)
    $end            reduce using rule 5 (vardecl -> boolvardecl .)


state 4

    (0) S' -> program .
    (1) program -> program . vardecl
    (2) program -> program . assertdecl
    (5) vardecl -> . boolvardecl
    (6) vardecl -> . graphvardecl
    (18) assertdecl -> . ASSERT expr
    (7) boolvardecl -> . BOOL idprod
    (8) graphvardecl -> . GRAPH idprod LPAREN NUMBER RPAREN graphdef
    (9) graphvardecl -> . GRAPH idprod graphdef
    (10) graphvardecl -> . SAGEGRAPH DOT idprod idprod LPAREN exprlist RPAREN

    ASSERT          shift and go to state 1
    BOOL            shift and go to state 7
    GRAPH           shift and go to state 6
    SAGEGRAPH       shift and go to state 9

    vardecl                        shift and go to state 17
    boolvardecl                    shift and go to state 3
    assertdecl                     shift and go to state 18
    graphvardecl                   shift and go to state 8

state 5

    (4) program -> assertdecl .

    ASSERT          reduce using rule 4 (program -> assertdecl .)
    BOOL            reduce using rule 4 (program -> assertdecl .)
    GRAPH           reduce using rule 4 (program -> assertdecl .)
    SAGEGRAPH       reduce using rule 4 (program -> assertdecl .)
    $end            reduce using rule 4 (program -> assertdecl .)


state 6

    (8) graphvardecl -> GRAPH . idprod LPAREN NUMBER RPAREN graphdef
    (9) graphvardecl -> GRAPH . idprod graphdef
    (27) idprod -> . ID

    ID              shift and go to state 16

    idprod                         shift and go to state 19

state 7

    (7) boolvardecl -> BOOL . idprod
    (27) idprod -> . ID

    ID              shift and go to state 16

    idprod                         shift and go to state 20

state 8

    (6) vardecl -> graphvardecl .

    ASSERT          reduce using rule 6 (vardecl -> graphvardecl .)
    BOOL            reduce using rule 6 (vardecl -> graphvardecl .)
    GRAPH           reduce using rule 6 (vardecl -> graphvardecl .)
    SAGEGRAPH       reduce using rule 6 (vardecl -> graphvardecl .)
    $end            reduce using rule 6 (vardecl -> graphvardecl .)


state 9

    (10) graphvardecl -> SAGEGRAPH . DOT idprod idprod LPAREN exprlist RPAREN

    DOT             shift and go to state 21


state 10

    (18) assertdecl -> ASSERT expr .
    (20) expr -> expr . AND expr
    (21) expr -> expr . OR expr

    ASSERT          reduce using rule 18 (assertdecl -> ASSERT expr .)
    BOOL            reduce using rule 18 (assertdecl -> ASSERT expr .)
    GRAPH           reduce using rule 18 (assertdecl -> ASSERT expr .)
    SAGEGRAPH       reduce using rule 18 (assertdecl -> ASSERT expr .)
    $end            reduce using rule 18 (assertdecl -> ASSERT expr .)
    AND             shift and go to state 22
    OR              shift and go to state 23


state 11

    (25) expr -> NUMBER .

    AND             reduce using rule 25 (expr -> NUMBER .)
    OR              reduce using rule 25 (expr -> NUMBER .)
    COMMA           reduce using rule 25 (expr -> NUMBER .)
    RBRACKET        reduce using rule 25 (expr -> NUMBER .)
    RPAREN          reduce using rule 25 (expr -> NUMBER .)
    ASSERT          reduce using rule 25 (expr -> NUMBER .)
    BOOL            reduce using rule 25 (expr -> NUMBER .)
    GRAPH           reduce using rule 25 (expr -> NUMBER .)
    SAGEGRAPH       reduce using rule 25 (expr -> NUMBER .)
    $end            reduce using rule 25 (expr -> NUMBER .)


state 12

    (24) expr -> idprod .
    (19) operation -> idprod . LPAREN exprlist RPAREN

    AND             reduce using rule 24 (expr -> idprod .)
    OR              reduce using rule 24 (expr -> idprod .)
    COMMA           reduce using rule 24 (expr -> idprod .)
    RBRACKET        reduce using rule 24 (expr -> idprod .)
    RPAREN          reduce using rule 24 (expr -> idprod .)
    ASSERT          reduce using rule 24 (expr -> idprod .)
    BOOL            reduce using rule 24 (expr -> idprod .)
    GRAPH           reduce using rule 24 (expr -> idprod .)
    SAGEGRAPH       reduce using rule 24 (expr -> idprod .)
    $end            reduce using rule 24 (expr -> idprod .)
    LPAREN          shift and go to state 24


state 13

    (26) expr -> LPAREN . expr RPAREN
    (20) expr -> . expr AND expr
    (21) expr -> . expr OR expr
    (22) expr -> . NOT expr
    (23) expr -> . operation
    (24) expr -> . idprod
    (25) expr -> . NUMBER
    (26) expr -> . LPAREN expr RPAREN
    (19) operation -> . idprod LPAREN exprlist RPAREN
    (27) idprod -> . ID

    NOT             shift and go to state 14
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 13
    ID              shift and go to state 16

    expr                           shift and go to state 25
    operation                      shift and go to state 15
    idprod                         shift and go to state 12

state 14

    (22) expr -> NOT . expr
    (20) expr -> . expr AND expr
    (21) expr -> . expr OR expr
    (22) expr -> . NOT expr
    (23) expr -> . operation
    (24) expr -> . idprod
    (25) expr -> . NUMBER
    (26) expr -> . LPAREN expr RPAREN
    (19) operation -> . idprod LPAREN exprlist RPAREN
    (27) idprod -> . ID

    NOT             shift and go to state 14
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 13
    ID              shift and go to state 16

    expr                           shift and go to state 26
    operation                      shift and go to state 15
    idprod                         shift and go to state 12

state 15

    (23) expr -> operation .

    AND             reduce using rule 23 (expr -> operation .)
    OR              reduce using rule 23 (expr -> operation .)
    COMMA           reduce using rule 23 (expr -> operation .)
    RBRACKET        reduce using rule 23 (expr -> operation .)
    RPAREN          reduce using rule 23 (expr -> operation .)
    ASSERT          reduce using rule 23 (expr -> operation .)
    BOOL            reduce using rule 23 (expr -> operation .)
    GRAPH           reduce using rule 23 (expr -> operation .)
    SAGEGRAPH       reduce using rule 23 (expr -> operation .)
    $end            reduce using rule 23 (expr -> operation .)


state 16

    (27) idprod -> ID .

    LPAREN          reduce using rule 27 (idprod -> ID .)
    AND             reduce using rule 27 (idprod -> ID .)
    OR              reduce using rule 27 (idprod -> ID .)
    COMMA           reduce using rule 27 (idprod -> ID .)
    RBRACKET        reduce using rule 27 (idprod -> ID .)
    ASSERT          reduce using rule 27 (idprod -> ID .)
    BOOL            reduce using rule 27 (idprod -> ID .)
    GRAPH           reduce using rule 27 (idprod -> ID .)
    SAGEGRAPH       reduce using rule 27 (idprod -> ID .)
    $end            reduce using rule 27 (idprod -> ID .)
    RPAREN          reduce using rule 27 (idprod -> ID .)
    EQUALS          reduce using rule 27 (idprod -> ID .)
    ID              reduce using rule 27 (idprod -> ID .)


state 17

    (1) program -> program vardecl .

    ASSERT          reduce using rule 1 (program -> program vardecl .)
    BOOL            reduce using rule 1 (program -> program vardecl .)
    GRAPH           reduce using rule 1 (program -> program vardecl .)
    SAGEGRAPH       reduce using rule 1 (program -> program vardecl .)
    $end            reduce using rule 1 (program -> program vardecl .)


state 18

    (2) program -> program assertdecl .

    ASSERT          reduce using rule 2 (program -> program assertdecl .)
    BOOL            reduce using rule 2 (program -> program assertdecl .)
    GRAPH           reduce using rule 2 (program -> program assertdecl .)
    SAGEGRAPH       reduce using rule 2 (program -> program assertdecl .)
    $end            reduce using rule 2 (program -> program assertdecl .)


state 19

    (8) graphvardecl -> GRAPH idprod . LPAREN NUMBER RPAREN graphdef
    (9) graphvardecl -> GRAPH idprod . graphdef
    (11) graphdef -> . EQUALS LBRACKET exprlist RBRACKET
    (12) graphdef -> . EQUALS STR
    (13) graphdef -> . empty
    (28) empty -> .

    LPAREN          shift and go to state 29
    EQUALS          shift and go to state 28
    ASSERT          reduce using rule 28 (empty -> .)
    BOOL            reduce using rule 28 (empty -> .)
    GRAPH           reduce using rule 28 (empty -> .)
    SAGEGRAPH       reduce using rule 28 (empty -> .)
    $end            reduce using rule 28 (empty -> .)

    graphdef                       shift and go to state 27
    empty                          shift and go to state 30

state 20

    (7) boolvardecl -> BOOL idprod .

    ASSERT          reduce using rule 7 (boolvardecl -> BOOL idprod .)
    BOOL            reduce using rule 7 (boolvardecl -> BOOL idprod .)
    GRAPH           reduce using rule 7 (boolvardecl -> BOOL idprod .)
    SAGEGRAPH       reduce using rule 7 (boolvardecl -> BOOL idprod .)
    $end            reduce using rule 7 (boolvardecl -> BOOL idprod .)


state 21

    (10) graphvardecl -> SAGEGRAPH DOT . idprod idprod LPAREN exprlist RPAREN
    (27) idprod -> . ID

    ID              shift and go to state 16

    idprod                         shift and go to state 31

state 22

    (20) expr -> expr AND . expr
    (20) expr -> . expr AND expr
    (21) expr -> . expr OR expr
    (22) expr -> . NOT expr
    (23) expr -> . operation
    (24) expr -> . idprod
    (25) expr -> . NUMBER
    (26) expr -> . LPAREN expr RPAREN
    (19) operation -> . idprod LPAREN exprlist RPAREN
    (27) idprod -> . ID

    NOT             shift and go to state 14
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 13
    ID              shift and go to state 16

    expr                           shift and go to state 32
    operation                      shift and go to state 15
    idprod                         shift and go to state 12

state 23

    (21) expr -> expr OR . expr
    (20) expr -> . expr AND expr
    (21) expr -> . expr OR expr
    (22) expr -> . NOT expr
    (23) expr -> . operation
    (24) expr -> . idprod
    (25) expr -> . NUMBER
    (26) expr -> . LPAREN expr RPAREN
    (19) operation -> . idprod LPAREN exprlist RPAREN
    (27) idprod -> . ID

    NOT             shift and go to state 14
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 13
    ID              shift and go to state 16

    expr                           shift and go to state 33
    operation                      shift and go to state 15
    idprod                         shift and go to state 12

state 24

    (19) operation -> idprod LPAREN . exprlist RPAREN
    (14) exprlist -> . expr nonemptylist
    (15) exprlist -> . empty
    (20) expr -> . expr AND expr
    (21) expr -> . expr OR expr
    (22) expr -> . NOT expr
    (23) expr -> . operation
    (24) expr -> . idprod
    (25) expr -> . NUMBER
    (26) expr -> . LPAREN expr RPAREN
    (28) empty -> .
    (19) operation -> . idprod LPAREN exprlist RPAREN
    (27) idprod -> . ID

    NOT             shift and go to state 14
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 13
    RPAREN          reduce using rule 28 (empty -> .)
    ID              shift and go to state 16

    expr                           shift and go to state 34
    idprod                         shift and go to state 12
    operation                      shift and go to state 15
    exprlist                       shift and go to state 35
    empty                          shift and go to state 36

state 25

    (26) expr -> LPAREN expr . RPAREN
    (20) expr -> expr . AND expr
    (21) expr -> expr . OR expr

    RPAREN          shift and go to state 37
    AND             shift and go to state 22
    OR              shift and go to state 23


state 26

    (22) expr -> NOT expr .
    (20) expr -> expr . AND expr
    (21) expr -> expr . OR expr

    AND             reduce using rule 22 (expr -> NOT expr .)
    OR              reduce using rule 22 (expr -> NOT expr .)
    COMMA           reduce using rule 22 (expr -> NOT expr .)
    RBRACKET        reduce using rule 22 (expr -> NOT expr .)
    RPAREN          reduce using rule 22 (expr -> NOT expr .)
    ASSERT          reduce using rule 22 (expr -> NOT expr .)
    BOOL            reduce using rule 22 (expr -> NOT expr .)
    GRAPH           reduce using rule 22 (expr -> NOT expr .)
    SAGEGRAPH       reduce using rule 22 (expr -> NOT expr .)
    $end            reduce using rule 22 (expr -> NOT expr .)

  ! AND             [ shift and go to state 22 ]
  ! OR              [ shift and go to state 23 ]


state 27

    (9) graphvardecl -> GRAPH idprod graphdef .

    ASSERT          reduce using rule 9 (graphvardecl -> GRAPH idprod graphdef .)
    BOOL            reduce using rule 9 (graphvardecl -> GRAPH idprod graphdef .)
    GRAPH           reduce using rule 9 (graphvardecl -> GRAPH idprod graphdef .)
    SAGEGRAPH       reduce using rule 9 (graphvardecl -> GRAPH idprod graphdef .)
    $end            reduce using rule 9 (graphvardecl -> GRAPH idprod graphdef .)


state 28

    (11) graphdef -> EQUALS . LBRACKET exprlist RBRACKET
    (12) graphdef -> EQUALS . STR

    LBRACKET        shift and go to state 38
    STR             shift and go to state 39


state 29

    (8) graphvardecl -> GRAPH idprod LPAREN . NUMBER RPAREN graphdef

    NUMBER          shift and go to state 40


state 30

    (13) graphdef -> empty .

    ASSERT          reduce using rule 13 (graphdef -> empty .)
    BOOL            reduce using rule 13 (graphdef -> empty .)
    GRAPH           reduce using rule 13 (graphdef -> empty .)
    SAGEGRAPH       reduce using rule 13 (graphdef -> empty .)
    $end            reduce using rule 13 (graphdef -> empty .)


state 31

    (10) graphvardecl -> SAGEGRAPH DOT idprod . idprod LPAREN exprlist RPAREN
    (27) idprod -> . ID

    ID              shift and go to state 16

    idprod                         shift and go to state 41

state 32

    (20) expr -> expr AND expr .
    (20) expr -> expr . AND expr
    (21) expr -> expr . OR expr

    COMMA           reduce using rule 20 (expr -> expr AND expr .)
    RBRACKET        reduce using rule 20 (expr -> expr AND expr .)
    RPAREN          reduce using rule 20 (expr -> expr AND expr .)
    ASSERT          reduce using rule 20 (expr -> expr AND expr .)
    BOOL            reduce using rule 20 (expr -> expr AND expr .)
    GRAPH           reduce using rule 20 (expr -> expr AND expr .)
    SAGEGRAPH       reduce using rule 20 (expr -> expr AND expr .)
    $end            reduce using rule 20 (expr -> expr AND expr .)
    AND             shift and go to state 22
    OR              shift and go to state 23

  ! AND             [ reduce using rule 20 (expr -> expr AND expr .) ]
  ! OR              [ reduce using rule 20 (expr -> expr AND expr .) ]


state 33

    (21) expr -> expr OR expr .
    (20) expr -> expr . AND expr
    (21) expr -> expr . OR expr

    COMMA           reduce using rule 21 (expr -> expr OR expr .)
    RBRACKET        reduce using rule 21 (expr -> expr OR expr .)
    RPAREN          reduce using rule 21 (expr -> expr OR expr .)
    ASSERT          reduce using rule 21 (expr -> expr OR expr .)
    BOOL            reduce using rule 21 (expr -> expr OR expr .)
    GRAPH           reduce using rule 21 (expr -> expr OR expr .)
    SAGEGRAPH       reduce using rule 21 (expr -> expr OR expr .)
    $end            reduce using rule 21 (expr -> expr OR expr .)
    AND             shift and go to state 22
    OR              shift and go to state 23

  ! AND             [ reduce using rule 21 (expr -> expr OR expr .) ]
  ! OR              [ reduce using rule 21 (expr -> expr OR expr .) ]


state 34

    (14) exprlist -> expr . nonemptylist
    (20) expr -> expr . AND expr
    (21) expr -> expr . OR expr
    (16) nonemptylist -> . COMMA expr nonemptylist
    (17) nonemptylist -> . empty
    (28) empty -> .

    AND             shift and go to state 22
    OR              shift and go to state 23
    COMMA           shift and go to state 43
    RPAREN          reduce using rule 28 (empty -> .)
    RBRACKET        reduce using rule 28 (empty -> .)

    nonemptylist                   shift and go to state 42
    empty                          shift and go to state 44

state 35

    (19) operation -> idprod LPAREN exprlist . RPAREN

    RPAREN          shift and go to state 45


state 36

    (15) exprlist -> empty .

    RPAREN          reduce using rule 15 (exprlist -> empty .)
    RBRACKET        reduce using rule 15 (exprlist -> empty .)


state 37

    (26) expr -> LPAREN expr RPAREN .

    AND             reduce using rule 26 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 26 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 26 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 26 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 26 (expr -> LPAREN expr RPAREN .)
    ASSERT          reduce using rule 26 (expr -> LPAREN expr RPAREN .)
    BOOL            reduce using rule 26 (expr -> LPAREN expr RPAREN .)
    GRAPH           reduce using rule 26 (expr -> LPAREN expr RPAREN .)
    SAGEGRAPH       reduce using rule 26 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 26 (expr -> LPAREN expr RPAREN .)


state 38

    (11) graphdef -> EQUALS LBRACKET . exprlist RBRACKET
    (14) exprlist -> . expr nonemptylist
    (15) exprlist -> . empty
    (20) expr -> . expr AND expr
    (21) expr -> . expr OR expr
    (22) expr -> . NOT expr
    (23) expr -> . operation
    (24) expr -> . idprod
    (25) expr -> . NUMBER
    (26) expr -> . LPAREN expr RPAREN
    (28) empty -> .
    (19) operation -> . idprod LPAREN exprlist RPAREN
    (27) idprod -> . ID

    NOT             shift and go to state 14
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 13
    RBRACKET        reduce using rule 28 (empty -> .)
    ID              shift and go to state 16

    expr                           shift and go to state 34
    idprod                         shift and go to state 12
    operation                      shift and go to state 15
    exprlist                       shift and go to state 46
    empty                          shift and go to state 36

state 39

    (12) graphdef -> EQUALS STR .

    ASSERT          reduce using rule 12 (graphdef -> EQUALS STR .)
    BOOL            reduce using rule 12 (graphdef -> EQUALS STR .)
    GRAPH           reduce using rule 12 (graphdef -> EQUALS STR .)
    SAGEGRAPH       reduce using rule 12 (graphdef -> EQUALS STR .)
    $end            reduce using rule 12 (graphdef -> EQUALS STR .)


state 40

    (8) graphvardecl -> GRAPH idprod LPAREN NUMBER . RPAREN graphdef

    RPAREN          shift and go to state 47


state 41

    (10) graphvardecl -> SAGEGRAPH DOT idprod idprod . LPAREN exprlist RPAREN

    LPAREN          shift and go to state 48


state 42

    (14) exprlist -> expr nonemptylist .

    RPAREN          reduce using rule 14 (exprlist -> expr nonemptylist .)
    RBRACKET        reduce using rule 14 (exprlist -> expr nonemptylist .)


state 43

    (16) nonemptylist -> COMMA . expr nonemptylist
    (20) expr -> . expr AND expr
    (21) expr -> . expr OR expr
    (22) expr -> . NOT expr
    (23) expr -> . operation
    (24) expr -> . idprod
    (25) expr -> . NUMBER
    (26) expr -> . LPAREN expr RPAREN
    (19) operation -> . idprod LPAREN exprlist RPAREN
    (27) idprod -> . ID

    NOT             shift and go to state 14
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 13
    ID              shift and go to state 16

    expr                           shift and go to state 49
    operation                      shift and go to state 15
    idprod                         shift and go to state 12

state 44

    (17) nonemptylist -> empty .

    RPAREN          reduce using rule 17 (nonemptylist -> empty .)
    RBRACKET        reduce using rule 17 (nonemptylist -> empty .)


state 45

    (19) operation -> idprod LPAREN exprlist RPAREN .

    AND             reduce using rule 19 (operation -> idprod LPAREN exprlist RPAREN .)
    OR              reduce using rule 19 (operation -> idprod LPAREN exprlist RPAREN .)
    ASSERT          reduce using rule 19 (operation -> idprod LPAREN exprlist RPAREN .)
    BOOL            reduce using rule 19 (operation -> idprod LPAREN exprlist RPAREN .)
    GRAPH           reduce using rule 19 (operation -> idprod LPAREN exprlist RPAREN .)
    SAGEGRAPH       reduce using rule 19 (operation -> idprod LPAREN exprlist RPAREN .)
    $end            reduce using rule 19 (operation -> idprod LPAREN exprlist RPAREN .)
    RPAREN          reduce using rule 19 (operation -> idprod LPAREN exprlist RPAREN .)
    COMMA           reduce using rule 19 (operation -> idprod LPAREN exprlist RPAREN .)
    RBRACKET        reduce using rule 19 (operation -> idprod LPAREN exprlist RPAREN .)


state 46

    (11) graphdef -> EQUALS LBRACKET exprlist . RBRACKET

    RBRACKET        shift and go to state 50


state 47

    (8) graphvardecl -> GRAPH idprod LPAREN NUMBER RPAREN . graphdef
    (11) graphdef -> . EQUALS LBRACKET exprlist RBRACKET
    (12) graphdef -> . EQUALS STR
    (13) graphdef -> . empty
    (28) empty -> .

    EQUALS          shift and go to state 28
    ASSERT          reduce using rule 28 (empty -> .)
    BOOL            reduce using rule 28 (empty -> .)
    GRAPH           reduce using rule 28 (empty -> .)
    SAGEGRAPH       reduce using rule 28 (empty -> .)
    $end            reduce using rule 28 (empty -> .)

    graphdef                       shift and go to state 51
    empty                          shift and go to state 30

state 48

    (10) graphvardecl -> SAGEGRAPH DOT idprod idprod LPAREN . exprlist RPAREN
    (14) exprlist -> . expr nonemptylist
    (15) exprlist -> . empty
    (20) expr -> . expr AND expr
    (21) expr -> . expr OR expr
    (22) expr -> . NOT expr
    (23) expr -> . operation
    (24) expr -> . idprod
    (25) expr -> . NUMBER
    (26) expr -> . LPAREN expr RPAREN
    (28) empty -> .
    (19) operation -> . idprod LPAREN exprlist RPAREN
    (27) idprod -> . ID

    NOT             shift and go to state 14
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 13
    RPAREN          reduce using rule 28 (empty -> .)
    ID              shift and go to state 16

    expr                           shift and go to state 34
    idprod                         shift and go to state 12
    operation                      shift and go to state 15
    exprlist                       shift and go to state 52
    empty                          shift and go to state 36

state 49

    (16) nonemptylist -> COMMA expr . nonemptylist
    (20) expr -> expr . AND expr
    (21) expr -> expr . OR expr
    (16) nonemptylist -> . COMMA expr nonemptylist
    (17) nonemptylist -> . empty
    (28) empty -> .

    AND             shift and go to state 22
    OR              shift and go to state 23
    COMMA           shift and go to state 43
    RPAREN          reduce using rule 28 (empty -> .)
    RBRACKET        reduce using rule 28 (empty -> .)

    nonemptylist                   shift and go to state 53
    empty                          shift and go to state 44

state 50

    (11) graphdef -> EQUALS LBRACKET exprlist RBRACKET .

    ASSERT          reduce using rule 11 (graphdef -> EQUALS LBRACKET exprlist RBRACKET .)
    BOOL            reduce using rule 11 (graphdef -> EQUALS LBRACKET exprlist RBRACKET .)
    GRAPH           reduce using rule 11 (graphdef -> EQUALS LBRACKET exprlist RBRACKET .)
    SAGEGRAPH       reduce using rule 11 (graphdef -> EQUALS LBRACKET exprlist RBRACKET .)
    $end            reduce using rule 11 (graphdef -> EQUALS LBRACKET exprlist RBRACKET .)


state 51

    (8) graphvardecl -> GRAPH idprod LPAREN NUMBER RPAREN graphdef .

    ASSERT          reduce using rule 8 (graphvardecl -> GRAPH idprod LPAREN NUMBER RPAREN graphdef .)
    BOOL            reduce using rule 8 (graphvardecl -> GRAPH idprod LPAREN NUMBER RPAREN graphdef .)
    GRAPH           reduce using rule 8 (graphvardecl -> GRAPH idprod LPAREN NUMBER RPAREN graphdef .)
    SAGEGRAPH       reduce using rule 8 (graphvardecl -> GRAPH idprod LPAREN NUMBER RPAREN graphdef .)
    $end            reduce using rule 8 (graphvardecl -> GRAPH idprod LPAREN NUMBER RPAREN graphdef .)


state 52

    (10) graphvardecl -> SAGEGRAPH DOT idprod idprod LPAREN exprlist . RPAREN

    RPAREN          shift and go to state 54


state 53

    (16) nonemptylist -> COMMA expr nonemptylist .

    RPAREN          reduce using rule 16 (nonemptylist -> COMMA expr nonemptylist .)
    RBRACKET        reduce using rule 16 (nonemptylist -> COMMA expr nonemptylist .)


state 54

    (10) graphvardecl -> SAGEGRAPH DOT idprod idprod LPAREN exprlist RPAREN .

    ASSERT          reduce using rule 10 (graphvardecl -> SAGEGRAPH DOT idprod idprod LPAREN exprlist RPAREN .)
    BOOL            reduce using rule 10 (graphvardecl -> SAGEGRAPH DOT idprod idprod LPAREN exprlist RPAREN .)
    GRAPH           reduce using rule 10 (graphvardecl -> SAGEGRAPH DOT idprod idprod LPAREN exprlist RPAREN .)
    SAGEGRAPH       reduce using rule 10 (graphvardecl -> SAGEGRAPH DOT idprod idprod LPAREN exprlist RPAREN .)
    $end            reduce using rule 10 (graphvardecl -> SAGEGRAPH DOT idprod idprod LPAREN exprlist RPAREN .)

