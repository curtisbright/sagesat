Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program vardecl
Rule 2     program -> program assertdecl
Rule 3     program -> vardecl
Rule 4     program -> assertdecl
Rule 5     vardecl -> boolvardecl
Rule 6     vardecl -> graphvardecl
Rule 7     boolvardecl -> BOOL idprod
Rule 8     graphvardecl -> GRAPH idprod LPAREN NUMBER RPAREN graphdef
Rule 9     graphvardecl -> SAGEGRAPH DOT idprod idprod LPAREN NUMBER RPAREN
Rule 10    graphdef -> EQUALS LBRACKET exprlist RBRACKET
Rule 11    graphdef -> empty
Rule 12    exprlist -> expr nonemptylist
Rule 13    exprlist -> empty
Rule 14    nonemptylist -> COMMA expr nonemptylist
Rule 15    nonemptylist -> empty
Rule 16    assertdecl -> ASSERT expr
Rule 17    operation -> idprod LPAREN exprlist RPAREN
Rule 18    expr -> expr AND expr
Rule 19    expr -> expr OR expr
Rule 20    expr -> NOT expr
Rule 21    expr -> operation
Rule 22    expr -> idprod
Rule 23    expr -> NUMBER
Rule 24    expr -> LPAREN expr RPAREN
Rule 25    idprod -> ID
Rule 26    empty -> <empty>

Terminals, with rules where they appear

AND                  : 18
ASSERT               : 16
BOOL                 : 7
COMMA                : 14
DOT                  : 9
EQUALS               : 10
GRAPH                : 8
ID                   : 25
LBRACKET             : 10
LPAREN               : 8 9 17 24
NOT                  : 20
NUMBER               : 8 9 23
OR                   : 19
RBRACKET             : 10
RPAREN               : 8 9 17 24
SAGEGRAPH            : 9
error                : 

Nonterminals, with rules where they appear

assertdecl           : 2 4
boolvardecl          : 5
empty                : 11 13 15
expr                 : 12 14 16 18 18 19 19 20 24
exprlist             : 10 17
graphdef             : 8
graphvardecl         : 6
idprod               : 7 8 9 9 17 22
nonemptylist         : 12 14
operation            : 21
program              : 1 2 0
vardecl              : 1 3

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program vardecl
    (2) program -> . program assertdecl
    (3) program -> . vardecl
    (4) program -> . assertdecl
    (5) vardecl -> . boolvardecl
    (6) vardecl -> . graphvardecl
    (16) assertdecl -> . ASSERT expr
    (7) boolvardecl -> . BOOL idprod
    (8) graphvardecl -> . GRAPH idprod LPAREN NUMBER RPAREN graphdef
    (9) graphvardecl -> . SAGEGRAPH DOT idprod idprod LPAREN NUMBER RPAREN

    ASSERT          shift and go to state 1
    BOOL            shift and go to state 7
    GRAPH           shift and go to state 6
    SAGEGRAPH       shift and go to state 9

    vardecl                        shift and go to state 2
    boolvardecl                    shift and go to state 3
    program                        shift and go to state 4
    assertdecl                     shift and go to state 5
    graphvardecl                   shift and go to state 8

state 1

    (16) assertdecl -> ASSERT . expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . operation
    (22) expr -> . idprod
    (23) expr -> . NUMBER
    (24) expr -> . LPAREN expr RPAREN
    (17) operation -> . idprod LPAREN exprlist RPAREN
    (25) idprod -> . ID

    NOT             shift and go to state 14
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 13
    ID              shift and go to state 16

    expr                           shift and go to state 10
    operation                      shift and go to state 15
    idprod                         shift and go to state 12

state 2

    (3) program -> vardecl .

    ASSERT          reduce using rule 3 (program -> vardecl .)
    BOOL            reduce using rule 3 (program -> vardecl .)
    GRAPH           reduce using rule 3 (program -> vardecl .)
    SAGEGRAPH       reduce using rule 3 (program -> vardecl .)
    $end            reduce using rule 3 (program -> vardecl .)


state 3

    (5) vardecl -> boolvardecl .

    ASSERT          reduce using rule 5 (vardecl -> boolvardecl .)
    BOOL            reduce using rule 5 (vardecl -> boolvardecl .)
    GRAPH           reduce using rule 5 (vardecl -> boolvardecl .)
    SAGEGRAPH       reduce using rule 5 (vardecl -> boolvardecl .)
    $end            reduce using rule 5 (vardecl -> boolvardecl .)


state 4

    (0) S' -> program .
    (1) program -> program . vardecl
    (2) program -> program . assertdecl
    (5) vardecl -> . boolvardecl
    (6) vardecl -> . graphvardecl
    (16) assertdecl -> . ASSERT expr
    (7) boolvardecl -> . BOOL idprod
    (8) graphvardecl -> . GRAPH idprod LPAREN NUMBER RPAREN graphdef
    (9) graphvardecl -> . SAGEGRAPH DOT idprod idprod LPAREN NUMBER RPAREN

    ASSERT          shift and go to state 1
    BOOL            shift and go to state 7
    GRAPH           shift and go to state 6
    SAGEGRAPH       shift and go to state 9

    vardecl                        shift and go to state 17
    boolvardecl                    shift and go to state 3
    assertdecl                     shift and go to state 18
    graphvardecl                   shift and go to state 8

state 5

    (4) program -> assertdecl .

    ASSERT          reduce using rule 4 (program -> assertdecl .)
    BOOL            reduce using rule 4 (program -> assertdecl .)
    GRAPH           reduce using rule 4 (program -> assertdecl .)
    SAGEGRAPH       reduce using rule 4 (program -> assertdecl .)
    $end            reduce using rule 4 (program -> assertdecl .)


state 6

    (8) graphvardecl -> GRAPH . idprod LPAREN NUMBER RPAREN graphdef
    (25) idprod -> . ID

    ID              shift and go to state 16

    idprod                         shift and go to state 19

state 7

    (7) boolvardecl -> BOOL . idprod
    (25) idprod -> . ID

    ID              shift and go to state 16

    idprod                         shift and go to state 20

state 8

    (6) vardecl -> graphvardecl .

    ASSERT          reduce using rule 6 (vardecl -> graphvardecl .)
    BOOL            reduce using rule 6 (vardecl -> graphvardecl .)
    GRAPH           reduce using rule 6 (vardecl -> graphvardecl .)
    SAGEGRAPH       reduce using rule 6 (vardecl -> graphvardecl .)
    $end            reduce using rule 6 (vardecl -> graphvardecl .)


state 9

    (9) graphvardecl -> SAGEGRAPH . DOT idprod idprod LPAREN NUMBER RPAREN

    DOT             shift and go to state 21


state 10

    (16) assertdecl -> ASSERT expr .
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

    ASSERT          reduce using rule 16 (assertdecl -> ASSERT expr .)
    BOOL            reduce using rule 16 (assertdecl -> ASSERT expr .)
    GRAPH           reduce using rule 16 (assertdecl -> ASSERT expr .)
    SAGEGRAPH       reduce using rule 16 (assertdecl -> ASSERT expr .)
    $end            reduce using rule 16 (assertdecl -> ASSERT expr .)
    AND             shift and go to state 22
    OR              shift and go to state 23


state 11

    (23) expr -> NUMBER .

    AND             reduce using rule 23 (expr -> NUMBER .)
    OR              reduce using rule 23 (expr -> NUMBER .)
    COMMA           reduce using rule 23 (expr -> NUMBER .)
    RPAREN          reduce using rule 23 (expr -> NUMBER .)
    RBRACKET        reduce using rule 23 (expr -> NUMBER .)
    ASSERT          reduce using rule 23 (expr -> NUMBER .)
    BOOL            reduce using rule 23 (expr -> NUMBER .)
    GRAPH           reduce using rule 23 (expr -> NUMBER .)
    SAGEGRAPH       reduce using rule 23 (expr -> NUMBER .)
    $end            reduce using rule 23 (expr -> NUMBER .)


state 12

    (22) expr -> idprod .
    (17) operation -> idprod . LPAREN exprlist RPAREN

    AND             reduce using rule 22 (expr -> idprod .)
    OR              reduce using rule 22 (expr -> idprod .)
    COMMA           reduce using rule 22 (expr -> idprod .)
    RPAREN          reduce using rule 22 (expr -> idprod .)
    RBRACKET        reduce using rule 22 (expr -> idprod .)
    ASSERT          reduce using rule 22 (expr -> idprod .)
    BOOL            reduce using rule 22 (expr -> idprod .)
    GRAPH           reduce using rule 22 (expr -> idprod .)
    SAGEGRAPH       reduce using rule 22 (expr -> idprod .)
    $end            reduce using rule 22 (expr -> idprod .)
    LPAREN          shift and go to state 24


state 13

    (24) expr -> LPAREN . expr RPAREN
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . operation
    (22) expr -> . idprod
    (23) expr -> . NUMBER
    (24) expr -> . LPAREN expr RPAREN
    (17) operation -> . idprod LPAREN exprlist RPAREN
    (25) idprod -> . ID

    NOT             shift and go to state 14
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 13
    ID              shift and go to state 16

    expr                           shift and go to state 25
    operation                      shift and go to state 15
    idprod                         shift and go to state 12

state 14

    (20) expr -> NOT . expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . operation
    (22) expr -> . idprod
    (23) expr -> . NUMBER
    (24) expr -> . LPAREN expr RPAREN
    (17) operation -> . idprod LPAREN exprlist RPAREN
    (25) idprod -> . ID

    NOT             shift and go to state 14
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 13
    ID              shift and go to state 16

    expr                           shift and go to state 26
    operation                      shift and go to state 15
    idprod                         shift and go to state 12

state 15

    (21) expr -> operation .

    AND             reduce using rule 21 (expr -> operation .)
    OR              reduce using rule 21 (expr -> operation .)
    COMMA           reduce using rule 21 (expr -> operation .)
    RPAREN          reduce using rule 21 (expr -> operation .)
    RBRACKET        reduce using rule 21 (expr -> operation .)
    ASSERT          reduce using rule 21 (expr -> operation .)
    BOOL            reduce using rule 21 (expr -> operation .)
    GRAPH           reduce using rule 21 (expr -> operation .)
    SAGEGRAPH       reduce using rule 21 (expr -> operation .)
    $end            reduce using rule 21 (expr -> operation .)


state 16

    (25) idprod -> ID .

    LPAREN          reduce using rule 25 (idprod -> ID .)
    AND             reduce using rule 25 (idprod -> ID .)
    OR              reduce using rule 25 (idprod -> ID .)
    COMMA           reduce using rule 25 (idprod -> ID .)
    RPAREN          reduce using rule 25 (idprod -> ID .)
    RBRACKET        reduce using rule 25 (idprod -> ID .)
    ASSERT          reduce using rule 25 (idprod -> ID .)
    BOOL            reduce using rule 25 (idprod -> ID .)
    GRAPH           reduce using rule 25 (idprod -> ID .)
    SAGEGRAPH       reduce using rule 25 (idprod -> ID .)
    $end            reduce using rule 25 (idprod -> ID .)
    ID              reduce using rule 25 (idprod -> ID .)


state 17

    (1) program -> program vardecl .

    ASSERT          reduce using rule 1 (program -> program vardecl .)
    BOOL            reduce using rule 1 (program -> program vardecl .)
    GRAPH           reduce using rule 1 (program -> program vardecl .)
    SAGEGRAPH       reduce using rule 1 (program -> program vardecl .)
    $end            reduce using rule 1 (program -> program vardecl .)


state 18

    (2) program -> program assertdecl .

    ASSERT          reduce using rule 2 (program -> program assertdecl .)
    BOOL            reduce using rule 2 (program -> program assertdecl .)
    GRAPH           reduce using rule 2 (program -> program assertdecl .)
    SAGEGRAPH       reduce using rule 2 (program -> program assertdecl .)
    $end            reduce using rule 2 (program -> program assertdecl .)


state 19

    (8) graphvardecl -> GRAPH idprod . LPAREN NUMBER RPAREN graphdef

    LPAREN          shift and go to state 27


state 20

    (7) boolvardecl -> BOOL idprod .

    ASSERT          reduce using rule 7 (boolvardecl -> BOOL idprod .)
    BOOL            reduce using rule 7 (boolvardecl -> BOOL idprod .)
    GRAPH           reduce using rule 7 (boolvardecl -> BOOL idprod .)
    SAGEGRAPH       reduce using rule 7 (boolvardecl -> BOOL idprod .)
    $end            reduce using rule 7 (boolvardecl -> BOOL idprod .)


state 21

    (9) graphvardecl -> SAGEGRAPH DOT . idprod idprod LPAREN NUMBER RPAREN
    (25) idprod -> . ID

    ID              shift and go to state 16

    idprod                         shift and go to state 28

state 22

    (18) expr -> expr AND . expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . operation
    (22) expr -> . idprod
    (23) expr -> . NUMBER
    (24) expr -> . LPAREN expr RPAREN
    (17) operation -> . idprod LPAREN exprlist RPAREN
    (25) idprod -> . ID

    NOT             shift and go to state 14
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 13
    ID              shift and go to state 16

    expr                           shift and go to state 29
    operation                      shift and go to state 15
    idprod                         shift and go to state 12

state 23

    (19) expr -> expr OR . expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . operation
    (22) expr -> . idprod
    (23) expr -> . NUMBER
    (24) expr -> . LPAREN expr RPAREN
    (17) operation -> . idprod LPAREN exprlist RPAREN
    (25) idprod -> . ID

    NOT             shift and go to state 14
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 13
    ID              shift and go to state 16

    expr                           shift and go to state 30
    operation                      shift and go to state 15
    idprod                         shift and go to state 12

state 24

    (17) operation -> idprod LPAREN . exprlist RPAREN
    (12) exprlist -> . expr nonemptylist
    (13) exprlist -> . empty
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . operation
    (22) expr -> . idprod
    (23) expr -> . NUMBER
    (24) expr -> . LPAREN expr RPAREN
    (26) empty -> .
    (17) operation -> . idprod LPAREN exprlist RPAREN
    (25) idprod -> . ID

    NOT             shift and go to state 14
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 13
    RPAREN          reduce using rule 26 (empty -> .)
    ID              shift and go to state 16

    expr                           shift and go to state 31
    idprod                         shift and go to state 12
    operation                      shift and go to state 15
    exprlist                       shift and go to state 32
    empty                          shift and go to state 33

state 25

    (24) expr -> LPAREN expr . RPAREN
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

    RPAREN          shift and go to state 34
    AND             shift and go to state 22
    OR              shift and go to state 23


state 26

    (20) expr -> NOT expr .
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 20 (expr -> NOT expr .)
    RPAREN          reduce using rule 20 (expr -> NOT expr .)
    RBRACKET        reduce using rule 20 (expr -> NOT expr .)
    ASSERT          reduce using rule 20 (expr -> NOT expr .)
    BOOL            reduce using rule 20 (expr -> NOT expr .)
    GRAPH           reduce using rule 20 (expr -> NOT expr .)
    SAGEGRAPH       reduce using rule 20 (expr -> NOT expr .)
    $end            reduce using rule 20 (expr -> NOT expr .)
    AND             shift and go to state 22
    OR              shift and go to state 23

  ! AND             [ reduce using rule 20 (expr -> NOT expr .) ]
  ! OR              [ reduce using rule 20 (expr -> NOT expr .) ]


state 27

    (8) graphvardecl -> GRAPH idprod LPAREN . NUMBER RPAREN graphdef

    NUMBER          shift and go to state 35


state 28

    (9) graphvardecl -> SAGEGRAPH DOT idprod . idprod LPAREN NUMBER RPAREN
    (25) idprod -> . ID

    ID              shift and go to state 16

    idprod                         shift and go to state 36

state 29

    (18) expr -> expr AND expr .
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

    COMMA           reduce using rule 18 (expr -> expr AND expr .)
    RPAREN          reduce using rule 18 (expr -> expr AND expr .)
    RBRACKET        reduce using rule 18 (expr -> expr AND expr .)
    ASSERT          reduce using rule 18 (expr -> expr AND expr .)
    BOOL            reduce using rule 18 (expr -> expr AND expr .)
    GRAPH           reduce using rule 18 (expr -> expr AND expr .)
    SAGEGRAPH       reduce using rule 18 (expr -> expr AND expr .)
    $end            reduce using rule 18 (expr -> expr AND expr .)
    AND             shift and go to state 22
    OR              shift and go to state 23

  ! AND             [ reduce using rule 18 (expr -> expr AND expr .) ]
  ! OR              [ reduce using rule 18 (expr -> expr AND expr .) ]


state 30

    (19) expr -> expr OR expr .
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

    COMMA           reduce using rule 19 (expr -> expr OR expr .)
    RPAREN          reduce using rule 19 (expr -> expr OR expr .)
    RBRACKET        reduce using rule 19 (expr -> expr OR expr .)
    ASSERT          reduce using rule 19 (expr -> expr OR expr .)
    BOOL            reduce using rule 19 (expr -> expr OR expr .)
    GRAPH           reduce using rule 19 (expr -> expr OR expr .)
    SAGEGRAPH       reduce using rule 19 (expr -> expr OR expr .)
    $end            reduce using rule 19 (expr -> expr OR expr .)
    AND             shift and go to state 22
    OR              shift and go to state 23

  ! AND             [ reduce using rule 19 (expr -> expr OR expr .) ]
  ! OR              [ reduce using rule 19 (expr -> expr OR expr .) ]


state 31

    (12) exprlist -> expr . nonemptylist
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (14) nonemptylist -> . COMMA expr nonemptylist
    (15) nonemptylist -> . empty
    (26) empty -> .

    AND             shift and go to state 22
    OR              shift and go to state 23
    COMMA           shift and go to state 38
    RPAREN          reduce using rule 26 (empty -> .)
    RBRACKET        reduce using rule 26 (empty -> .)

    nonemptylist                   shift and go to state 37
    empty                          shift and go to state 39

state 32

    (17) operation -> idprod LPAREN exprlist . RPAREN

    RPAREN          shift and go to state 40


state 33

    (13) exprlist -> empty .

    RPAREN          reduce using rule 13 (exprlist -> empty .)
    RBRACKET        reduce using rule 13 (exprlist -> empty .)


state 34

    (24) expr -> LPAREN expr RPAREN .

    AND             reduce using rule 24 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 24 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 24 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 24 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 24 (expr -> LPAREN expr RPAREN .)
    ASSERT          reduce using rule 24 (expr -> LPAREN expr RPAREN .)
    BOOL            reduce using rule 24 (expr -> LPAREN expr RPAREN .)
    GRAPH           reduce using rule 24 (expr -> LPAREN expr RPAREN .)
    SAGEGRAPH       reduce using rule 24 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 24 (expr -> LPAREN expr RPAREN .)


state 35

    (8) graphvardecl -> GRAPH idprod LPAREN NUMBER . RPAREN graphdef

    RPAREN          shift and go to state 41


state 36

    (9) graphvardecl -> SAGEGRAPH DOT idprod idprod . LPAREN NUMBER RPAREN

    LPAREN          shift and go to state 42


state 37

    (12) exprlist -> expr nonemptylist .

    RPAREN          reduce using rule 12 (exprlist -> expr nonemptylist .)
    RBRACKET        reduce using rule 12 (exprlist -> expr nonemptylist .)


state 38

    (14) nonemptylist -> COMMA . expr nonemptylist
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . operation
    (22) expr -> . idprod
    (23) expr -> . NUMBER
    (24) expr -> . LPAREN expr RPAREN
    (17) operation -> . idprod LPAREN exprlist RPAREN
    (25) idprod -> . ID

    NOT             shift and go to state 14
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 13
    ID              shift and go to state 16

    expr                           shift and go to state 43
    operation                      shift and go to state 15
    idprod                         shift and go to state 12

state 39

    (15) nonemptylist -> empty .

    RPAREN          reduce using rule 15 (nonemptylist -> empty .)
    RBRACKET        reduce using rule 15 (nonemptylist -> empty .)


state 40

    (17) operation -> idprod LPAREN exprlist RPAREN .

    AND             reduce using rule 17 (operation -> idprod LPAREN exprlist RPAREN .)
    OR              reduce using rule 17 (operation -> idprod LPAREN exprlist RPAREN .)
    ASSERT          reduce using rule 17 (operation -> idprod LPAREN exprlist RPAREN .)
    BOOL            reduce using rule 17 (operation -> idprod LPAREN exprlist RPAREN .)
    GRAPH           reduce using rule 17 (operation -> idprod LPAREN exprlist RPAREN .)
    SAGEGRAPH       reduce using rule 17 (operation -> idprod LPAREN exprlist RPAREN .)
    $end            reduce using rule 17 (operation -> idprod LPAREN exprlist RPAREN .)
    RPAREN          reduce using rule 17 (operation -> idprod LPAREN exprlist RPAREN .)
    COMMA           reduce using rule 17 (operation -> idprod LPAREN exprlist RPAREN .)
    RBRACKET        reduce using rule 17 (operation -> idprod LPAREN exprlist RPAREN .)


state 41

    (8) graphvardecl -> GRAPH idprod LPAREN NUMBER RPAREN . graphdef
    (10) graphdef -> . EQUALS LBRACKET exprlist RBRACKET
    (11) graphdef -> . empty
    (26) empty -> .

    EQUALS          shift and go to state 45
    ASSERT          reduce using rule 26 (empty -> .)
    BOOL            reduce using rule 26 (empty -> .)
    GRAPH           reduce using rule 26 (empty -> .)
    SAGEGRAPH       reduce using rule 26 (empty -> .)
    $end            reduce using rule 26 (empty -> .)

    graphdef                       shift and go to state 44
    empty                          shift and go to state 46

state 42

    (9) graphvardecl -> SAGEGRAPH DOT idprod idprod LPAREN . NUMBER RPAREN

    NUMBER          shift and go to state 47


state 43

    (14) nonemptylist -> COMMA expr . nonemptylist
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr
    (14) nonemptylist -> . COMMA expr nonemptylist
    (15) nonemptylist -> . empty
    (26) empty -> .

    AND             shift and go to state 22
    OR              shift and go to state 23
    COMMA           shift and go to state 38
    RPAREN          reduce using rule 26 (empty -> .)
    RBRACKET        reduce using rule 26 (empty -> .)

    nonemptylist                   shift and go to state 48
    empty                          shift and go to state 39

state 44

    (8) graphvardecl -> GRAPH idprod LPAREN NUMBER RPAREN graphdef .

    ASSERT          reduce using rule 8 (graphvardecl -> GRAPH idprod LPAREN NUMBER RPAREN graphdef .)
    BOOL            reduce using rule 8 (graphvardecl -> GRAPH idprod LPAREN NUMBER RPAREN graphdef .)
    GRAPH           reduce using rule 8 (graphvardecl -> GRAPH idprod LPAREN NUMBER RPAREN graphdef .)
    SAGEGRAPH       reduce using rule 8 (graphvardecl -> GRAPH idprod LPAREN NUMBER RPAREN graphdef .)
    $end            reduce using rule 8 (graphvardecl -> GRAPH idprod LPAREN NUMBER RPAREN graphdef .)


state 45

    (10) graphdef -> EQUALS . LBRACKET exprlist RBRACKET

    LBRACKET        shift and go to state 49


state 46

    (11) graphdef -> empty .

    ASSERT          reduce using rule 11 (graphdef -> empty .)
    BOOL            reduce using rule 11 (graphdef -> empty .)
    GRAPH           reduce using rule 11 (graphdef -> empty .)
    SAGEGRAPH       reduce using rule 11 (graphdef -> empty .)
    $end            reduce using rule 11 (graphdef -> empty .)


state 47

    (9) graphvardecl -> SAGEGRAPH DOT idprod idprod LPAREN NUMBER . RPAREN

    RPAREN          shift and go to state 50


state 48

    (14) nonemptylist -> COMMA expr nonemptylist .

    RPAREN          reduce using rule 14 (nonemptylist -> COMMA expr nonemptylist .)
    RBRACKET        reduce using rule 14 (nonemptylist -> COMMA expr nonemptylist .)


state 49

    (10) graphdef -> EQUALS LBRACKET . exprlist RBRACKET
    (12) exprlist -> . expr nonemptylist
    (13) exprlist -> . empty
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . operation
    (22) expr -> . idprod
    (23) expr -> . NUMBER
    (24) expr -> . LPAREN expr RPAREN
    (26) empty -> .
    (17) operation -> . idprod LPAREN exprlist RPAREN
    (25) idprod -> . ID

    NOT             shift and go to state 14
    NUMBER          shift and go to state 11
    LPAREN          shift and go to state 13
    RBRACKET        reduce using rule 26 (empty -> .)
    ID              shift and go to state 16

    expr                           shift and go to state 31
    idprod                         shift and go to state 12
    operation                      shift and go to state 15
    exprlist                       shift and go to state 51
    empty                          shift and go to state 33

state 50

    (9) graphvardecl -> SAGEGRAPH DOT idprod idprod LPAREN NUMBER RPAREN .

    ASSERT          reduce using rule 9 (graphvardecl -> SAGEGRAPH DOT idprod idprod LPAREN NUMBER RPAREN .)
    BOOL            reduce using rule 9 (graphvardecl -> SAGEGRAPH DOT idprod idprod LPAREN NUMBER RPAREN .)
    GRAPH           reduce using rule 9 (graphvardecl -> SAGEGRAPH DOT idprod idprod LPAREN NUMBER RPAREN .)
    SAGEGRAPH       reduce using rule 9 (graphvardecl -> SAGEGRAPH DOT idprod idprod LPAREN NUMBER RPAREN .)
    $end            reduce using rule 9 (graphvardecl -> SAGEGRAPH DOT idprod idprod LPAREN NUMBER RPAREN .)


state 51

    (10) graphdef -> EQUALS LBRACKET exprlist . RBRACKET

    RBRACKET        shift and go to state 52


state 52

    (10) graphdef -> EQUALS LBRACKET exprlist RBRACKET .

    ASSERT          reduce using rule 10 (graphdef -> EQUALS LBRACKET exprlist RBRACKET .)
    BOOL            reduce using rule 10 (graphdef -> EQUALS LBRACKET exprlist RBRACKET .)
    GRAPH           reduce using rule 10 (graphdef -> EQUALS LBRACKET exprlist RBRACKET .)
    SAGEGRAPH       reduce using rule 10 (graphdef -> EQUALS LBRACKET exprlist RBRACKET .)
    $end            reduce using rule 10 (graphdef -> EQUALS LBRACKET exprlist RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 26 resolved as shift
WARNING: shift/reduce conflict for OR in state 26 resolved as shift
